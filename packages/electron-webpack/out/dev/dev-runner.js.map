{"version":3,"sources":["../../src/dev/dev-runner.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport chalk from \"chalk\"\nimport { spawn } from \"child_process\"\nimport { readdir, remove } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport \"source-map-support/register\"\nimport webpack, { Compiler } from \"webpack\"\nimport { HmrServer } from \"../electron-main-hmr/HmrServer\"\nimport { configure } from \"../main\"\nimport { getFreePort, orNullIfFileNotExist } from \"../util\"\nimport { DelayedFunction, getCommonEnv, logError, logProcess, logProcessErrorOutput } from \"./devUtil\"\nimport { startRenderer } from \"./WebpackDevServerManager\"\n\nconst projectDir = process.cwd()\n\nlet socketPath: string | null = null\n\nconst debug = require(\"debug\")(\"electron-webpack\")\n\n// do not remove main.js to allow IDE to keep breakpoints\nasync function emptyMainOutput() {\n  const outDir = path.join(projectDir, \"dist\", \"main\")\n  const files = await orNullIfFileNotExist(readdir(outDir))\n  if (files == null) {\n    return\n  }\n\n  await BluebirdPromise.map(files.filter(it => !it.startsWith(\".\") && it !== \"main.js\"), it => remove(outDir + path.sep + it))\n}\n\nclass DevRunner {\n  async start() {\n    const wdsHost = \"localhost\"\n    const wdsPort = await getFreePort(wdsHost, 9080)\n    const env = {\n      ...getCommonEnv(),\n      ELECTRON_WEBPACK_WDS_HOST: wdsHost,\n      ELECTRON_WEBPACK_WDS_PORT: wdsPort,\n    }\n\n    const hmrServer = new HmrServer()\n    await Promise.all([\n      startRenderer(projectDir, env),\n      hmrServer.listen()\n        .then(it => {\n          socketPath = it\n        }),\n      emptyMainOutput()\n        .then(() => this.startMainCompilation(hmrServer)),\n    ])\n\n    hmrServer.ipc.on(\"error\", (error: Error) => {\n      logError(\"Main\", error)\n    })\n\n    const electronArgs = process.env.ELECTRON_ARGS\n    const args = electronArgs != null && electronArgs.length > 0 ? JSON.parse(electronArgs) : [`--inspect=${await getFreePort(\"127.0.0.1\", 5858)}`]\n    args.push(path.join(projectDir, \"dist/main/main.js\"))\n    // Pass remaining arguments to the application. Remove 3 instead of 2, to remove the `dev` argument as well.\n    args.push(...process.argv.slice(3))\n    // we should start only when both start and main are started\n    startElectron(args, env)\n  }\n\n  async startMainCompilation(hmrServer: HmrServer) {\n    const mainConfig = await configure(\"main\", {\n      production: false,\n      autoClean: false,\n      forkTsCheckerLogger: {\n        info: () => {\n          // ignore\n        },\n\n        warn: (message: string) => {\n          logProcess(\"Main\", message, chalk.yellow)\n        },\n\n        error: (message: string) => {\n          logProcess(\"Main\", message, chalk.red)\n        },\n      },\n    })\n\n    await new Promise((resolve: (() => void) | null, reject: ((error: Error) => void) | null) => {\n      const compiler: Compiler = webpack(mainConfig!!)\n\n      const printCompilingMessage = new DelayedFunction(() => {\n        logProcess(\"Main\", \"Compiling...\", chalk.yellow)\n      })\n      compiler.hooks.compile.tap(\"electron-webpack-dev-runner\", () => {\n        hmrServer.beforeCompile()\n        printCompilingMessage.schedule()\n      })\n\n      let watcher: Compiler.Watching | null = compiler.watch({}, (error, stats) => {\n        printCompilingMessage.cancel()\n\n        if (watcher == null) {\n          return\n        }\n\n        if (error != null) {\n          if (reject == null) {\n            logError(\"Main\", error)\n          }\n          else {\n            reject(error)\n            reject = null\n          }\n          return\n        }\n\n        logProcess(\"Main\", stats.toString({\n          colors: true,\n        }), chalk.yellow)\n\n        if (resolve != null) {\n          resolve()\n          resolve = null\n          return\n        }\n\n        hmrServer.built(stats)\n      })\n\n      require(\"async-exit-hook\")((callback: () => void) => {\n        debug(`async-exit-hook: ${callback == null}`)\n        const w = watcher\n        if (w == null) {\n          return\n        }\n\n        watcher = null\n        w.close(() => callback())\n      })\n    })\n  }\n}\n\nasync function main() {\n  const devRunner = new DevRunner()\n  await devRunner.start()\n}\n\nmain()\n  .catch(error => {\n    console.error(error)\n  })\n\nfunction startElectron(electronArgs: Array<string>, env: any) {\n  const electronProcess = spawn(require(\"electron\").toString(), electronArgs, {\n    env: {\n      ...env,\n      ELECTRON_HMR_SOCKET_PATH: socketPath,\n    }\n  })\n\n  // required on windows\n  require(\"async-exit-hook\")(() => {\n    electronProcess.kill(\"SIGINT\")\n  })\n\n  let queuedData: string | null = null\n  electronProcess.stdout.on(\"data\", data => {\n    data = data.toString()\n    // do not print the only line - doesn't make sense\n    if (data.trim() === \"[HMR] Updated modules:\") {\n      queuedData = data\n      return\n    }\n\n    if (queuedData != null) {\n      data = queuedData + data\n      queuedData = null\n    }\n\n    logProcess(\"Electron\", data, chalk.blue)\n  })\n\n  logProcessErrorOutput(\"Electron\", electronProcess)\n\n  electronProcess.on(\"close\", exitCode => {\n    debug(`Electron exited with exit code ${exitCode}`)\n    if (exitCode === 100) {\n      setImmediate(() => {\n        startElectron(electronArgs, env)\n      })\n    }\n    else {\n      (process as any).emit(\"message\", \"shutdown\")\n    }\n  })\n}"],"sourceRoot":""}
