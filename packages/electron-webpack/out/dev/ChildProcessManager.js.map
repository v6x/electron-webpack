{"version":3,"sources":["../../src/dev/ChildProcessManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChildProcess, spawn, SpawnOptions } from \"child_process\"\nimport * as path from \"path\"\n\nconst debug = require(\"debug\")(\"electron-webpack\")\n\nexport function run(program: string, args: Array<string>, options: SpawnOptions) {\n  const isWin = process.platform === \"win32\"\n  return spawn(isWin ? path.join(__dirname, \"../../vendor/runnerw.exe\") : program, isWin ? [program].concat(args) : args, options)\n}\n\nexport class ChildProcessManager {\n  // noinspection TypeScriptFieldCanBeMadeReadonly\n  private mainProcessExitCleanupCallback: (() => void) | null = null\n  // noinspection TypeScriptFieldCanBeMadeReadonly\n  private child: ChildProcess | null\n\n  constructor(child: ChildProcess, debugLabel: string, promiseNotifier: PromiseNotifier | null) {\n    this.child = child\n\n    require(\"async-exit-hook\")((callback: () => void) => {\n      this.mainProcessExitCleanupCallback = callback\n      const child = this.child\n      if (child == null) {\n        return\n      }\n\n      this.child = null\n\n      if (promiseNotifier != null) {\n        promiseNotifier.resolve()\n      }\n\n      if (debug.enabled) {\n        debug(`Send SIGINT to ${debugLabel}`)\n      }\n\n      if (process.platform === \"win32\") {\n        child.stdin.end(Buffer.from([5, 5]))\n      }\n      else {\n        child.kill(\"SIGINT\")\n      }\n    })\n\n    child.on(\"close\", code => {\n      const mainProcessExitCleanupCallback = this.mainProcessExitCleanupCallback\n      if (mainProcessExitCleanupCallback != null) {\n        this.mainProcessExitCleanupCallback = null\n        mainProcessExitCleanupCallback()\n      }\n\n      const child = this.child\n      if (child == null) {\n        return\n      }\n\n      this.child = null\n\n      const message = `${debugLabel} exited with code ${code}`\n\n      if (promiseNotifier != null) {\n        promiseNotifier.reject(new Error(message))\n      }\n\n      if (code === 0) {\n        if (debug.enabled) {\n          debug(message)\n          // otherwise no newline in the terminal\n          process.stderr.write(\"\\n\")\n        }\n      }\n      else {\n        process.stderr.write(`${message}\\n`)\n      }\n    })\n  }\n}\n\nexport class PromiseNotifier {\n  constructor(private _resolve: (() => void) | null, private _reject: ((error: Error) => void) | null) {\n  }\n\n  resolve() {\n    const r = this._resolve\n    if (r != null) {\n      this._resolve = null\n      r()\n    }\n  }\n\n  reject(error: Error) {\n    if (this._resolve != null) {\n      this._resolve = null\n    }\n\n    const _reject = this._reject\n    if (_reject != null) {\n      this._reject = null\n      _reject(error)\n    }\n  }\n}"],"sourceRoot":""}
