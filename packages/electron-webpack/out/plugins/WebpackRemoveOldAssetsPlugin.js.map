{"version":3,"sources":["../../src/plugins/WebpackRemoveOldAssetsPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { lstat, readdir, remove, Stats } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { Compiler } from \"webpack\"\nimport { orNullIfFileNotExist } from \"../util\"\n\nexport const MAX_FILE_REQUESTS = 8\nexport const CONCURRENCY = {concurrency: MAX_FILE_REQUESTS}\n\nconst debug = require(\"debug\")(\"electron-webpack:clean\")\n\nexport async function walk(initialDirPath: string, filter?: Filter | null): Promise<Array<string>> {\n  const result: Array<string> = []\n  const queue: Array<string> = [initialDirPath]\n  let addDirToResult = false\n  while (queue.length > 0) {\n    const dirPath = queue.pop()!\n\n    const childNames = await orNullIfFileNotExist(readdir(dirPath))\n    if (childNames == null) {\n      continue\n    }\n\n    if (addDirToResult) {\n      result.push(dirPath)\n    }\n    else {\n      addDirToResult = true\n    }\n\n    childNames.sort()\n\n    const dirs: Array<string> = []\n    // our handler is async, but we should add sorted files, so, we add file to result not in the mapper, but after map\n    const sortedFilePaths = await BluebirdPromise.map(childNames, name => {\n      const filePath = dirPath + path.sep + name\n      return lstat(filePath)\n        .then(stat => {\n          if (filter != null && !filter(filePath, stat)) {\n            return null\n          }\n\n          if (stat.isDirectory()) {\n            dirs.push(name)\n            return null\n          }\n          else {\n            return filePath\n          }\n        })\n    }, CONCURRENCY)\n\n    for (const child of sortedFilePaths) {\n      if (child != null) {\n        result.push(child)\n      }\n    }\n\n    dirs.sort()\n    for (const child of dirs) {\n      queue.push(dirPath + path.sep + child)\n    }\n  }\n\n  return result\n}\n\nexport type Filter = (file: string, stat: Stats) => boolean\n\nexport class WebpackRemoveOldAssetsPlugin {\n  constructor(private readonly dllManifest: string | null) {\n  }\n\n  apply(compiler: Compiler) {\n    compiler.hooks.afterEmit.tapAsync(\"WebpackRemoveOldAssetsPlugin\", (compilation: any, callback: (error?: Error) => void) => {\n      const newlyCreatedAssets = compilation.assets\n      const outDir = compiler.options.output!.path!\n      walk(outDir, (file, stat) => {\n        // dll plugin\n        if (file === this.dllManifest) {\n          return false\n        }\n\n        const relativePath = file.substring(outDir.length + 1)\n        if (stat.isFile()) {\n          return newlyCreatedAssets[relativePath] == null\n        }\n        else if (stat.isDirectory()) {\n          for (const p of Object.keys(newlyCreatedAssets)) {\n            if (p.length > relativePath.length && (p[relativePath.length] === \"/\" || p[relativePath.length] === \"\\\\\") && p.startsWith(relativePath)) {\n              return false\n            }\n          }\n          return true\n        }\n        return false\n      })\n        .then((it): any => {\n          if (it.length === 0) {\n            return null\n          }\n\n          if (debug.enabled) {\n            debug(`Remove outdated files:\\n  ${it.join(\"\\n  \")}`)\n          }\n          return BluebirdPromise.map(it, it => remove(it), CONCURRENCY)\n        })\n        .then(() => callback())\n        .catch(callback)\n    })\n  }\n}\n"],"sourceRoot":""}
