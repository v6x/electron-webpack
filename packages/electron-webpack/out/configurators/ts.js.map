{"version":3,"sources":["../../src/configurators/ts.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;2CAEO,WAAmC,YAAnC,EAAoE;AACzE,UAAM,YAAY,GAAG,YAAY,CAAC,gBAAb,CAA8B,gCAA9B,KAAmE,YAAY,CAAC,gBAAb,CAA8B,qBAA9B,CAAxF;;AACA,QAAI,EAAE,YAAY,IAAI,YAAY,CAAC,gBAAb,CAA8B,WAA9B,CAAlB,CAAJ,EAAmE;AACjE;AACD,KAJwE,CAMzE;;;AACA,IAAA,YAAY,CAAC,UAAb,CAAwB,MAAxB,CAA+B,CAA/B,EAAkC,CAAlC,EAAqC,KAArC,EAA4C,MAA5C;AAEA,UAAM,eAAe,GAAG,YAAY,CAAC,MAAb,IAAwB,YAAY,IAAI,CAAC,YAAY,CAAC,YAA9E;AAEA,UAAM,YAAY,GAAG,MAAM,kCAAqB,CAAC,IAAI,CAAC,IAAL,CAAU,YAAY,CAAC,SAAvB,EAAkC,eAAlC,CAAD,EAAqD,IAAI,CAAC,IAAL,CAAU,YAAY,CAAC,UAAvB,EAAmC,eAAnC,CAArD,CAArB,EAAgI,IAAhI,CAA3B,CAXyE,CAYzE;;AACA,QAAI,YAAY,IAAI,IAApB,EAA0B;AACxB,YAAM,IAAI,KAAJ,CAAU,uCAAuC,YAAY,CAAC,UAAU,mFAAxE,CAAN;AACD;;AAED,QAAI,YAAY,CAAC,KAAb,CAAmB,OAAvB,EAAgC;AAC9B,MAAA,YAAY,CAAC,KAAb,CAAmB,SAAS,YAAY,EAAxC;AACD,KAnBwE,CAqBzE;;;AACA,QAAI,eAAe,IAAI,CAAC,YAAY,CAAC,MAArC,EAA6C;AAC3C,YAAM,0BAA0B,GAAG,OAAO,CAAC,gCAAD,CAA1C;;AACA,MAAA,YAAY,CAAC,OAAb,CAAqB,IAArB,CAA0B,IAAI,0BAAJ,CAA+B;AACvD,QAAA,QAAQ,EAAE,YAD6C;AAEvD,QAAA,MAAM,EAAE,YAAY,CAAC,GAAb,CAAiB,mBAAjB,IAAwC;AAC9C,UAAA,IAAI,EAAE,MAAK,CACT;AACD,WAH6C;AAK9C,UAAA,IAAI,EAAE,OAAO,CAAC,IAAR,CAAa,IAAb,CAAkB,OAAlB,CALwC;AAM9C,UAAA,KAAK,EAAE,OAAO,CAAC,KAAR,CAAc,IAAd,CAAmB,OAAnB;AANuC;AAFO,OAA/B,CAA1B;AAWD;;AAED,UAAM,eAAe,GAAQ;AAC3B;AACA;AACA,MAAA,aAAa,EAAE,eAHY;AAI3B,MAAA,gBAAgB,EAAE,CAAC,QAAD,CAJS;AAK3B,MAAA,UAAU,EAAE;AALe,KAA7B;;AAQA,QAAI,YAAY,CAAC,KAAb,CAAmB,OAAvB,EAAgC;AAC9B,MAAA,YAAY,CAAC,KAAb,CAAmB,sBAAsB,IAAI,CAAC,SAAL,CAAe,eAAf,EAAgC,IAAhC,EAAsC,CAAtC,CAAwC,EAAjF;AACD;;AAED,IAAA,YAAY,CAAC,KAAb,CAAmB,IAAnB,CAAwB;AACtB,MAAA,IAAI,EAAE,SADgB;AAEtB,MAAA,OAAO,EAAE,cAFa;AAGtB,MAAA,GAAG,EAAE,CACH;AACE,QAAA,MAAM,EAAE,WADV;AAEE,QAAA,OAAO,EAAE;AAFX,OADG;AAHiB,KAAxB;AAUD,G;;kBA3DqB,mB","sourcesContent":["import * as path from \"path\"\nimport { WebpackConfigurator } from \"../main\"\nimport { getFirstExistingFile } from \"../util\"\n\nexport async function configureTypescript(configurator: WebpackConfigurator) {\n  const hasTsChecker = configurator.hasDevDependency(\"fork-ts-checker-webpack-plugin\") || configurator.hasDevDependency(\"electron-webpack-ts\")\n  if (!(hasTsChecker || configurator.hasDevDependency(\"ts-loader\"))) {\n    return\n  }\n\n  // add after js\n  configurator.extensions.splice(1, 0, \".ts\", \".tsx\")\n\n  const isTranspileOnly = configurator.isTest || (hasTsChecker && !configurator.isProduction)\n\n  const tsConfigFile = await getFirstExistingFile([path.join(configurator.sourceDir, \"tsconfig.json\"), path.join(configurator.projectDir, \"tsconfig.json\")], null)\n  // check to produce clear error message if no tsconfig.json\n  if (tsConfigFile == null) {\n    throw new Error(`Please create tsconfig.json in the \"${configurator.projectDir}\":\\n\\n{\\n  \"extends\": \"./node_modules/electron-webpack/tsconfig-base.json\"\\n}\\n\\n`)\n  }\n\n  if (configurator.debug.enabled) {\n    configurator.debug(`Using ${tsConfigFile}`)\n  }\n\n  // no sense to use fork-ts-checker-webpack-plugin for production build\n  if (isTranspileOnly && !configurator.isTest) {\n    const ForkTsCheckerWebpackPlugin = require(\"fork-ts-checker-webpack-plugin\")\n    configurator.plugins.push(new ForkTsCheckerWebpackPlugin({\n      tsconfig: tsConfigFile,\n      logger: configurator.env.forkTsCheckerLogger || {\n        info: () => {\n          // ignore\n        },\n\n        warn: console.warn.bind(console),\n        error: console.error.bind(console),\n      }\n    }))\n  }\n\n  const tsLoaderOptions: any = {\n    // use transpileOnly mode to speed-up compilation\n    // in the test mode also, because checked during dev or production build\n    transpileOnly: isTranspileOnly,\n    appendTsSuffixTo: [/\\.vue$/],\n    configFile: tsConfigFile,\n  }\n\n  if (configurator.debug.enabled) {\n    configurator.debug(`ts-loader options: ${JSON.stringify(tsLoaderOptions, null, 2)}`)\n  }\n\n  configurator.rules.push({\n    test: /\\.tsx?$/,\n    exclude: /node_modules/,\n    use: [\n      {\n        loader: \"ts-loader\",\n        options: tsLoaderOptions\n      },\n    ],\n  })\n}"],"sourceRoot":""}
