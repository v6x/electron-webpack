{"version":3,"sources":["../../src/electron-main-hmr/HmrServer.ts"],"names":[],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAGA,MAAM,KAAK,GAAG,OAAO,CAAC,OAAD,CAAP,CAAiB,6BAAjB,CAAd;;AAEM,MAAO,SAAP,CAAgB;AAAtB,EAAA,WAAA,GAAA;AACU,SAAA,KAAA,GAAQ,KAAR;AACC,SAAA,GAAA,GAAM,KAAI,kBAAJ,GAAN;AAmCV;;AAjCC,EAAA,MAAM,GAAA;AACJ,WAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACrC,YAAM,UAAU,GAAG,0BAA0B,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAqB,EAArB,CAAwB,OAArE;AACA,WAAK,GAAL,CAAS,MAAT,CAAgB;AAAC,QAAA,IAAI,EAAE;AAAP,OAAhB,EAAoC,KAAK,IAAG;AAC1C,YAAI,KAAK,IAAI,IAAb,EAAmB;AACjB,UAAA,MAAM,CAAC,KAAD,CAAN;AACD;;AACD,YAAI,KAAK,CAAC,OAAV,EAAmB;AACjB,UAAA,KAAK,CAAC,2BAA2B,UAAU,EAAtC,CAAL;AACD;;AACD,QAAA,OAAO,CAAC,UAAD,CAAP;AACD,OARD;AASD,KAXM,CAAP;AAYD;;AAED,EAAA,aAAa,GAAA;AACX,SAAK,KAAL,GAAa,KAAb;AACD;;AAED,EAAA,KAAK,CAAC,KAAD,EAAa;AAChB,SAAK,KAAL,GAAa,IAAb;AACA,IAAA,YAAY,CAAC,MAAK;AAChB,UAAI,CAAC,KAAK,KAAV,EAAiB;AACf;AACD;;AAED,YAAM,IAAI,GAAG,KAAK,CAAC,MAAN,CAAa;AAAC,QAAA,MAAM,EAAE,KAAT;AAAgB,QAAA,MAAM,EAAE,KAAxB;AAA+B,QAAA,QAAQ,EAAE,KAAzC;AAAgD,QAAA,OAAO,EAAE;AAAzD,OAAb,EAA8E,IAA3F;;AACA,UAAI,KAAK,CAAC,OAAV,EAAmB;AACjB,QAAA,KAAK,CAAC,oBAAoB,IAAI,EAAzB,CAAL;AACD;;AACD,WAAK,GAAL,CAAS,IAAT,CAAc,QAAd,EAAwB;AAAC,QAAA;AAAD,OAAxB;AACD,KAVW,CAAZ;AAWD;;AApCmB,C","sourcesContent":["import Crocket from \"crocket\"\nimport { Stats } from \"webpack\"\n\nconst debug = require(\"debug\")(\"electron-webpack:dev-runner\")\n\nexport class HmrServer {\n  private state = false\n  readonly ipc = new Crocket()\n\n  listen(): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const socketPath = `/tmp/electron-main-ipc-${process.pid.toString(16)}.sock`\n      this.ipc.listen({path: socketPath}, error => {\n        if (error != null) {\n          reject(error)\n        }\n        if (debug.enabled) {\n          debug(`HMR Server listening on ${socketPath}`)\n        }\n        resolve(socketPath)\n      })\n    })\n  }\n\n  beforeCompile() {\n    this.state = false\n  }\n\n  built(stats: Stats): void {\n    this.state = true\n    setImmediate(() => {\n      if (!this.state) {\n        return\n      }\n\n      const hash = stats.toJson({assets: false, chunks: false, children: false, modules: false}).hash\n      if (debug.enabled) {\n        debug(`Send built: hash ${hash}`)\n      }\n      this.ipc.emit(\"/built\", {hash})\n    })\n  }\n}"],"sourceRoot":""}
