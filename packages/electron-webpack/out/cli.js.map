{"version":3,"sources":["../src/cli.ts"],"names":[],"mappings":";;;AAEA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEA;AACA;AACA,iBACG,OADH,CACW,CAAC,KAAD,EAAQ,SAAR,EAAmB,GAAnB,CADX,EACoC,qBADpC,EAC2D,KAAK,IAAI,KADpE,EAC2E,IAAI,IAAI,KAAK,CAAC,KAAD,CADxF,EAEG,OAFH,CAEW,CAAC,MAAD,CAFX,EAEqB,sBAFrB,EAE6C,KAAK,IAAI,KAFtD,EAE6D,IAAI,IAAI,KAAK,CAAC,MAAD,CAF1E,EAGG,OAHH,CAGW,CAAC,UAAD,CAHX,EAGyB,0BAHzB,EAGqD,KAAK,IAAI,KAH9D,EAGqE,IAAI,IAAI,KAAK,CAAC,UAAD,CAHlF,EAIG,OAJH,CAIW,CAAC,KAAD,CAJX,EAIoB,qBAJpB,EAI2C,KAAK,IAAI,KAJpD,EAI2D,IAAI,IAAI,KAAK,CAAC,cAAD,CAJxE,EAKG,OALH,CAKW,CAAC,KAAD,CALX,EAKoB,wBALpB,EAK8C,KAAK,IAAI,KALvD,EAK8D,IAAI,IAAI,YAAY,EALlF,EAMG,IANH;;AAQA,SAAS,KAAT,CAAe,UAAf,EAAiC;AAC/B,QAAM,IAAI,GAAG,OAAO,CAAC,IAArB,CAD+B,CAE/B;;AACA,QAAM,UAAU,GAAG,IAAI,CAAC,MAAL,GAAc,CAAd,IAAmB,CAAC,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,CAAmB,GAAnB,CAApB,GAA8C,CAA9C,GAAkD,CAArE;AACA,QAAM,gBAAgB,GAAG,UAAU,GAAG,IAAI,CAAC,MAAlB,GAA2B,IAAI,CAAC,KAAL,CAAW,UAAX,CAA3B,GAAoD,EAA7E,CAJ+B,CAK/B;;AACA,EAAA,IAAI,CAAC,MAAL,GAAc,CAAd;;AACA,MAAI,CAAC,gBAAgB,CAAC,IAAjB,CAAsB,EAAE,IAAI,EAAE,CAAC,QAAH,CAAY,kBAAZ,CAA5B,CAAL,EAAmE;AACjE,IAAA,IAAI,CAAC,IAAL,CAAU,kBAAV;AACD;;AACD,EAAA,IAAI,CAAC,IAAL,CAAU,YAAV;AACA,EAAA,IAAI,CAAC,IAAL,CAAU,GAAG,gBAAb;AACA,EAAA,IAAI,CAAC,IAAL,CAAU,UAAV,EAAsB,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,IAArB,EAA2B,WAAW,UAAU,YAAhD,CAAtB;;AAEA,EAAA,OAAO,CAAC,OAAD,CAAP,CAAiB,IAAI,CAAC,KAAL,CAAW,CAAX,CAAjB;;AACA,EAAA,OAAO,CAAC,IAAI,CAAC,IAAL,CAAU,OAAO,CAAC,GAAR,EAAV,EAAyB,cAAzB,EAAyC,aAAzC,EAAwD,KAAxD,EAA+D,QAA/D,CAAD,CAAP;AACD;;AAED,SAAS,YAAT,GAAqB;AACnB,EAAA,OAAO,CAAC,kBAAD,CAAP;AACD,C","sourcesContent":["#!/usr/bin/env node\n\nimport * as path from \"path\"\nimport yargs from \"yargs\"\n\n// not strict because we allow to pass any webpack args\n// tslint:disable-next-line:no-unused-expression\nyargs\n  .command([\"app\", \"compile\", \"*\"], \"Compile application\", yargs => yargs, argv => build(\"app\"))\n  .command([\"main\"], \"Compile main process\", yargs => yargs, argv => build(\"main\"))\n  .command([\"renderer\"], \"Compile renderer process\", yargs => yargs, argv => build(\"renderer\"))\n  .command([\"dll\"], \"Compile DLL bundles\", yargs => yargs, argv => build(\"renderer.dll\"))\n  .command([\"dev\"], \"Run a development mode\", yargs => yargs, argv => runInDevMode())\n  .argv\n\nfunction build(configFile: string) {\n  const args = process.argv\n  // if command `electron-webpack` - remove first 2 args, if `electron-webpack compile` (or any other subcommand name) - 3\n  const sliceIndex = args.length > 2 && !args[2].startsWith(\"-\") ? 3 : 2\n  const extraWebpackArgs = sliceIndex < args.length ? args.slice(sliceIndex) : []\n  // remove extra args\n  args.length = 2\n  if (!extraWebpackArgs.some(it => it.includes(\"--env.production\"))) {\n    args.push(\"--env.production\")\n  }\n  args.push(\"--progress\")\n  args.push(...extraWebpackArgs)\n  args.push(\"--config\", path.join(__dirname, \"..\", `webpack.${configFile}.config.js`))\n\n  require(\"yargs\")(args.slice(2))\n  require(path.join(process.cwd(), \"node_modules\", \"webpack-cli\", \"bin\", \"cli.js\"))\n}\n\nfunction runInDevMode() {\n  require(\"./dev/dev-runner\")\n}"],"sourceRoot":""}
