{"version":3,"sources":["../src/util.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;;;;2CAEO,WAA0B,IAA1B,EAAsC;AAC3C,WAAO,oBAAoB,CAAC,sBAAK,IAAL,CAAD,CAA3B;AACD,G;;kBAFqB,U;;;;;;;AAIhB,SAAU,oBAAV,CAAkC,OAAlC,EAAqD;AACzD,SAAO,gBAAgB,CAAC,OAAD,EAAU,IAAV,CAAvB;AACD;;AAEK,SAAU,gBAAV,CAA8B,OAA9B,EAAmD,aAAnD,EAAmE;AACvE,SAAO,OAAO,CACX,KADI,CACE,CAAC,IAAG;AACT,QAAI,CAAC,CAAC,IAAF,KAAW,QAAX,IAAuB,CAAC,CAAC,IAAF,KAAW,SAAtC,EAAiD;AAC/C,aAAO,aAAP;AACD;;AACD,UAAM,CAAN;AACD,GANI,CAAP;AAOD;;AAEK,SAAU,oBAAV,CAA+B,KAA/B,EAAqD,OAArD,EAA2E;AAC/E,SAAO,uBAAgB,MAAhB,CAAuB,KAAK,CAAC,GAAN,CAAU,EAAE,IAAI,OAAO,IAAI,IAAX,GAAkB,EAAlB,GAAuB,IAAI,CAAC,IAAL,CAAU,OAAV,EAAmB,EAAnB,CAAvC,CAAvB,EAAuF,EAAE,IAAI,UAAU,CAAC,EAAD,CAAV,CAAe,IAAf,CAAoB,EAAE,IAAI,EAAE,IAAI,IAAhC,CAA7F,EACJ,IADI,CACC,EAAE,IAAI,EAAE,CAAC,MAAH,GAAY,CAAZ,GAAgB,EAAE,CAAC,CAAD,CAAlB,GAAwB,IAD/B,CAAP;AAED;;AAEK,SAAU,WAAV,CAAsB,WAAtB,EAA2C,WAA3C,EAA8D;AAClE,SAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACrC,UAAM,MAAM,GAAG,yBAAa;AAAC,MAAA,cAAc,EAAE;AAAjB,KAAb,CAAf;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,WAAnB,EAAgC,MAAK;AACnC,YAAM,IAAI,GAAI,MAAM,CAAC,OAAP,GAAyB,IAAvC;AACA,MAAA,MAAM,CAAC,KAAP,CAAa,MAAM,OAAO,CAAC,IAAD,CAA1B;AACD,KAHD;;AAKA,aAAS,QAAT,CAAkB,IAAlB,EAA8B;AAC5B,MAAA,MAAM,CAAC,MAAP,CAAc;AACZ,QAAA,IAAI,EAAE,WADM;AAEZ,QAAA,IAFY;AAGZ,QAAA,OAAO,EAAE,CAHG;AAIZ,QAAA,SAAS,EAAE;AAJC,OAAd;AAMD;;AAED,IAAA,MAAM,CAAC,EAAP,CAAU,OAAV,EAAmB,CAAC,IAAG;AACrB,UAAK,CAAS,CAAC,IAAV,KAAmB,YAAxB,EAAsC;AACpC,QAAA,MAAM,CAAC,KAAP,CAAa,MAAM,QAAQ,CAAC,CAAD,CAA3B;AACD,OAFD,MAGK;AACH,QAAA,MAAM,CAAC,CAAD,CAAN;AACD;AACF,KAPD;AASA,IAAA,QAAQ,CAAC,WAAD,CAAR;AACD,GA1BM,CAAP;AA2BD,C","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { stat, Stats } from \"fs-extra-p\"\nimport { createServer } from \"net\"\nimport * as path from \"path\"\n\nexport async function statOrNull(file: string): Promise<Stats | null> {\n  return orNullIfFileNotExist(stat(file))\n}\n\nexport function orNullIfFileNotExist<T>(promise: Promise<T>): Promise<T | null> {\n  return orIfFileNotExist(promise, null)\n}\n\nexport function orIfFileNotExist<T>(promise: Promise<T>, fallbackValue: T): Promise<T> {\n  return promise\n    .catch(e => {\n      if (e.code === \"ENOENT\" || e.code === \"ENOTDIR\") {\n        return fallbackValue\n      }\n      throw e\n    })\n}\n\nexport function getFirstExistingFile(names: Array<string>, rootDir: string | null): Promise<string | null> {\n  return BluebirdPromise.filter(names.map(it => rootDir == null ? it : path.join(rootDir, it)), it => statOrNull(it).then(it => it != null))\n    .then(it => it.length > 0 ? it[0] : null)\n}\n\nexport function getFreePort(defaultHost: string, defaultPort: number) {\n  return new Promise((resolve, reject) => {\n    const server = createServer({pauseOnConnect: true})\n    server.addListener(\"listening\", () => {\n      const port = (server.address() as any).port\n      server.close(() => resolve(port))\n    })\n\n    function doListen(port: number) {\n      server.listen({\n        host: defaultHost,\n        port,\n        backlog: 1,\n        exclusive: true\n      })\n    }\n\n    server.on(\"error\", e => {\n      if ((e as any).code === \"EADDRINUSE\") {\n        server.close(() => doListen(0))\n      }\n      else {\n        reject(e)\n      }\n    })\n\n    doListen(defaultPort)\n  })\n}"],"sourceRoot":""}
